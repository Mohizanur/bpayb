// üî• BEAST MODE MONITORING COMMANDS
// Performance monitoring commands for admin users
// /stats, /quota, /memory, /cache commands

import { beastModeOptimizer } from "../utils/beastModeOptimizer.js";
import { beastModeIntegration } from "../utils/beastModeIntegration.js";

// Register BEAST MODE commands
export function registerBeastModeCommands(bot, isAuthorizedAdmin) {
  // /stats - Overall performance metrics
  bot.command("stats", async (ctx) => {
    try {
      // Check admin access
      const isAdmin = await isAuthorizedAdmin(ctx);
      if (!isAdmin) {
        return ctx.reply("‚õî This command is for administrators only.");
      }

      const stats = beastModeIntegration.getStatsForCommand();

      const message = `
üî• **BEAST MODE PERFORMANCE STATS**

üìä **Status**: ${stats.status}
**Health Score**: ${stats.score}

‚ö° **Performance**
‚Ä¢ Total Requests: ${stats.performance.requests}
‚Ä¢ Cache Hit Rate: ${stats.performance.cacheHitRate}
‚Ä¢ Uptime: ${stats.performance.uptime}

üß† **Cache Status**
‚Ä¢ Overall Hit Rate: ${stats.cache.hitRate}
‚Ä¢ Total Items: ${stats.cache.totalItems}
‚Ä¢ Instant Layer: ${stats.cache.layers.instant}
‚Ä¢ User Layer: ${stats.cache.layers.user}
‚Ä¢ Service Layer: ${stats.cache.layers.service}
‚Ä¢ Stats Layer: ${stats.cache.layers.stats}
‚Ä¢ Session Layer: ${stats.cache.layers.session}
‚Ä¢ Rate Limit Layer: ${stats.cache.layers.rateLimit}

üõ°Ô∏è **Quota Protection**
‚Ä¢ Mode: ${stats.quota.mode}
‚Ä¢ Usage: ${stats.quota.usage}

üíæ **Memory**
‚Ä¢ Current: ${stats.memory.current}
‚Ä¢ Usage: ${stats.memory.percentage}

üöÄ **Capacity**: 5,000 concurrent users
üßü **Zombie Mode**: IMMORTAL
`;

      await ctx.reply(message, { parse_mode: "Markdown" });
    } catch (error) {
      console.error("‚ùå /stats command error:", error);
      await ctx.reply("‚ö†Ô∏è Error fetching stats. Please try again.");
    }
  });

  // /quota - Quota protection status
  bot.command("quota", async (ctx) => {
    try {
      const isAdmin = await isAuthorizedAdmin(ctx);
      if (!isAdmin) {
        return ctx.reply("‚õî This command is for administrators only.");
      }

      const stats = beastModeOptimizer.getComprehensiveStats();
      const quota = stats.quota;

      const message = `
üõ°Ô∏è **QUOTA PROTECTION STATUS**

**Current Mode**: ${quota.mode}
**Description**: ${quota.description}
**Cache TTL**: ${quota.cacheTTL}

üìä **Daily Usage**
‚Ä¢ Reads: ${quota.quota.reads} / ${quota.limits.reads}
‚Ä¢ Writes: ${quota.quota.writes} / ${quota.limits.writes}
‚Ä¢ Deletes: ${quota.quota.deletes} / ${quota.limits.deletes}

**Overall Usage**: ${quota.usage}

üéØ **Protection Modes**
‚Ä¢ **NORMAL** (0-70%): Full functionality, 5min cache
‚Ä¢ **CONSERVATIVE** (70-80%): Reduced queries, 10min cache
‚Ä¢ **AGGRESSIVE** (80-90%): Minimal DB access, 30min cache
‚Ä¢ **EMERGENCY** (90-95%): Cache-only, 1hr cache

‚úÖ **Status**: ${quota.usage < "70%" ? "HEALTHY" : quota.usage < "80%" ? "ELEVATED" : quota.usage < "90%" ? "HIGH" : "CRITICAL"}
`;

      await ctx.reply(message, { parse_mode: "Markdown" });
    } catch (error) {
      console.error("‚ùå /quota command error:", error);
      await ctx.reply("‚ö†Ô∏è Error fetching quota status. Please try again.");
    }
  });

  // /memory - Memory health status
  bot.command("memory", async (ctx) => {
    try {
      const isAdmin = await isAuthorizedAdmin(ctx);
      if (!isAdmin) {
        return ctx.reply("‚õî This command is for administrators only.");
      }

      const stats = beastModeOptimizer.getComprehensiveStats();
      const memory = stats.memory;

      const status =
        parseFloat(memory.percentage) > 85
          ? "CRITICAL"
          : parseFloat(memory.percentage) > 80
            ? "HIGH"
            : parseFloat(memory.percentage) > 70
              ? "ELEVATED"
              : "HEALTHY";

      const message = `
üíæ **MEMORY HEALTH STATUS**

**Status**: ${status}

üìä **Current Usage**
‚Ä¢ Heap Used: ${memory.current}
‚Ä¢ Heap Total: ${memory.total}
‚Ä¢ RSS: ${memory.rss}
‚Ä¢ Percentage: ${memory.percentage}

‚öôÔ∏è **Configuration**
‚Ä¢ Max Memory: ${memory.max}
‚Ä¢ Cleanup Threshold: ${memory.threshold}

üßπ **Auto-Cleanup**
‚Ä¢ Triggers at 85% usage
‚Ä¢ Forced GC every 5 minutes
‚Ä¢ Automatic cache eviction

${parseFloat(memory.percentage) > 80 ? "‚ö†Ô∏è **Warning**: Memory usage high, auto-cleanup active" : "‚úÖ **Memory health is good**"}
`;

      await ctx.reply(message, { parse_mode: "Markdown" });
    } catch (error) {
      console.error("‚ùå /memory command error:", error);
      await ctx.reply("‚ö†Ô∏è Error fetching memory status. Please try again.");
    }
  });

  // /cache - Cache statistics
  bot.command("cache", async (ctx) => {
    try {
      const isAdmin = await isAuthorizedAdmin(ctx);
      if (!isAdmin) {
        return ctx.reply("‚õî This command is for administrators only.");
      }

      const stats = beastModeOptimizer.getComprehensiveStats();
      const cache = stats.cache;

      const message = `
üß† **CACHE SYSTEM STATUS**

**Overall Hit Rate**: ${cache.hitRate}
**Total Items**: ${cache.totalSize}

üìä **Layer Statistics**
‚Ä¢ Instant Hits: ${cache.instantHits}
‚Ä¢ User Hits: ${cache.userHits}
‚Ä¢ Service Hits: ${cache.serviceHits}
‚Ä¢ Stats Hits: ${cache.statsHits}
‚Ä¢ Session Hits: ${cache.sessionHits}
‚Ä¢ Rate Limit Hits: ${cache.rateLimitHits}
‚Ä¢ Cache Misses: ${cache.misses}

üî¢ **Layer Sizes**
‚Ä¢ Instant Layer: ${cache.layers.instant} / 1,000
‚Ä¢ User Layer: ${cache.layers.user} / 10,000
‚Ä¢ Service Layer: ${cache.layers.service} / 5,000
‚Ä¢ Stats Layer: ${cache.layers.stats} / 10,000
‚Ä¢ Session Layer: ${cache.layers.session} / 50,000
‚Ä¢ Rate Limit Layer: ${cache.layers.rateLimit} / 50,000

üìà **Performance**
‚Ä¢ Total Sets: ${cache.sets}
‚Ä¢ Total Evictions: ${cache.evictions}
‚Ä¢ Auto-Cleanup: Every 30 seconds

${parseFloat(cache.hitRate) > 80 ? "‚úÖ **Cache performance excellent**" : parseFloat(cache.hitRate) > 70 ? "‚ö†Ô∏è **Cache performance good**" : "üö® **Cache performance needs attention**"}
`;

      await ctx.reply(message, { parse_mode: "Markdown" });
    } catch (error) {
      console.error("‚ùå /cache command error:", error);
      await ctx.reply("‚ö†Ô∏è Error fetching cache status. Please try again.");
    }
  });

  console.log("‚úÖ BEAST MODE commands registered:");
  console.log("   /stats - Performance metrics");
  console.log("   /quota - Quota protection status");
  console.log("   /memory - Memory health");
  console.log("   /cache - Cache statistics");
}

export default registerBeastModeCommands;
