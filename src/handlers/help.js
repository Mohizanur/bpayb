import { escapeMarkdownV2 } from "../utils/i18n.js";
import { firestore } from "../utils/firestore.js";

export default function helpHandler(bot) {
  console.log("üîß Registering enhanced help command handler");
  
  bot.command("help", async (ctx) => {
    try {
      console.log("üöÄ HELP COMMAND TRIGGERED!");
      console.log("User ID:", ctx.from?.id);
      console.log("User language:", ctx.userLang);
      
      const lang = ctx.from.language_code === 'am' ? 'am' : 'en';
      
      const helpMessage = lang === "am" 
        ? `üîß **BirrPay ·ä•·à≠·ã≥·â≥ ·àõ·ä•·ä®·àç**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìã **·â∞·å†·âÉ·àö ·âµ·ãï·ãõ·ãû·âΩ**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üéØ ·ãã·äì ·âµ·ãï·ãõ·ãû·âΩ:**
‚Ä¢ \`/start\` - ·ãã·äì ·àù·äï·ã© ·ä•·äì ·ä†·åà·àç·åç·àé·â∂·âΩ
‚Ä¢ \`/help\` - ·ã≠·àÖ ·ä•·à≠·ã≥·â≥ ·àò·àç·ä•·ä≠·âµ
‚Ä¢ \`/mysubs\` - ·ã®·ä•·à≠·àµ·ãé ·àù·ãù·åà·â£·ãé·âΩ ·ã≠·àò·àç·ä®·â±

**‚ÑπÔ∏è ·àò·à®·åÉ ·ä•·äì ·ãµ·åã·çç:**
‚Ä¢ \`/faq\` - ·â†·â∞·ã∞·åã·åã·àö ·ã®·àö·å†·ã®·âÅ ·å•·ã´·âÑ·ãé·âΩ
‚Ä¢ \`/support\` - ·ã®·ã∞·äï·â†·äû·âΩ ·ãµ·åã·çç ·ã´·åç·äô
‚Ä¢ \`/lang\` - ·ã®·âã·äï·âã ·âÖ·äï·â•·àÆ·âΩ ·ã≠·âÄ·ã≠·à©

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üöÄ **·çà·å£·äï ·ä•·à≠·àù·åÉ·ãé·âΩ**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ ·ä†·ã≤·àµ ·àù·ãù·åà·â£ ·àà·àò·åÄ·àò·à≠: \`/start\` ·äï ·â∞·å†·âÖ·àò·ãç
üìä ·àù·ãù·åà·â£·ãé·âΩ·ãé·äï ·àà·àõ·àµ·â∞·ã≥·ã∞·à≠: \`/mysubs\` ·äï ·â∞·å†·âÖ·àò·ãç
üí¨ ·ãµ·åã·çç ·àà·àõ·åç·äò·âµ: \`/support\` ·äï ·â∞·å†·âÖ·àò·ãç

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° **·å†·âÉ·àö ·àù·ä≠·àÆ·âΩ**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚Ä¢ ·àÅ·àâ·äï·àù ·àò·àç·ä•·ä≠·â∂·âΩ ·â†·ä†·àõ·à≠·äõ ·ãà·ã≠·àù ·ä•·äï·åç·àä·ãù·äõ ·ã≠·àã·ä©
‚Ä¢ ·ã®·ä≠·çç·ã´ ·çé·â∂ ·åç·àç·åΩ ·ä•·äì ·ã®·àö·äê·â†·â• ·àò·àÜ·äï ·ä†·àà·â†·âµ
‚Ä¢ ·ã®·ã∞·äï·â†·äû·âΩ ·ãµ·åã·çç 24/7 ·ãù·åç·åÅ ·äê·ãç

**üÜò ·ä•·à≠·ã≥·â≥ ·ã´·àµ·çà·àç·åç·ãé·â≥·àç?** \`/support\` ·äï ·ã≠·å†·âÄ·àô!`
        : `üîß **BirrPay Help Center**

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìã **User Commands**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**üéØ Main Commands:**
‚Ä¢ \`/start\` - Main menu and services
‚Ä¢ \`/help\` - Show this help message
‚Ä¢ \`/mysubs\` - View your subscriptions

**‚ÑπÔ∏è Information & Support:**
‚Ä¢ \`/faq\` - Frequently asked questions
‚Ä¢ \`/support\` - Contact customer support
‚Ä¢ \`/lang\` - Change language settings

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üöÄ **Quick Actions**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ To start a new subscription: Use \`/start\`
üìä To manage subscriptions: Use \`/mysubs\`
üí¨ To get support: Use \`/support\`

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° **Helpful Tips**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚Ä¢ Send all messages in Amharic or English
‚Ä¢ Payment screenshots must be clear and readable
‚Ä¢ Customer support is available 24/7

**üÜò Need Help?** Use \`/support\`!`;

      const helpKeyboard = [
        [
          { 
            text: lang === "am" ? "‚ùì FAQ ·ã≠·àò·àç·ä®·â±" : "‚ùì View FAQ", 
            callback_data: "faq_menu" 
          },
          { 
            text: lang === "am" ? "üõ†Ô∏è ·ãµ·åã·çç ·ä†·åç·äô" : "üõ†Ô∏è Get Support", 
            callback_data: "support_menu" 
          }
        ],
        [
          { 
            text: lang === "am" ? "üìñ ·ä•·äï·ã¥·âµ ·ä•·äï·ã∞·àö·à∞·à´" : "üìñ How It Works", 
            callback_data: "how_to_use" 
          }
        ],
        [
          { 
            text: lang === "am" ? "üè† ·ãã·äì ·àù·äï·ã©" : "üè† Main Menu", 
            callback_data: "back_to_start" 
          }
        ]
      ];

      await ctx.reply(helpMessage, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: helpKeyboard }
      });

      // Log help usage
      await firestore.collection('userActivities').add({
        userId: ctx.from.id,
        activity: 'help_accessed',
        timestamp: new Date(),
        metadata: { command: 'help', language: lang }
      });

      console.log("‚úÖ Enhanced help response sent successfully!");
    } catch (error) {
      console.error("‚ö†Ô∏è Error in help command:", error);
      try {
        const errorMsg = ctx.from.language_code === 'am'
          ? "·ã≠·âÖ·à≠·â≥·ç£ ·âΩ·åç·à≠ ·â∞·çà·å•·àØ·àç·ç¢ ·ä•·â£·ä≠·ãé ·ä•·äï·ã∞·åà·äì ·ã≠·àû·ä≠·à©·ç¢"
          : "Sorry, something went wrong. Please try again.";
        await ctx.reply(errorMsg);
      } catch (replyError) {
        console.error("Failed to send error message:", replyError);
      }
    }
  });

  // Enhanced mysubs command
  bot.command("mysubs", async (ctx) => {
    try {
      const lang = ctx.from.language_code === 'am' ? 'am' : 'en';
      
      // Quick access to subscriptions
      const quickMessage = lang === "am"
        ? "üìä **·ã®·ä•·à≠·àµ·ãé ·àù·ãù·åà·â£·ãé·âΩ**\n\n·àù·ãù·åà·â£·ãé·âΩ·ãé·äï ·àà·àò·àò·àç·ä®·âµ ·ä®·â≥·âΩ ·ã´·àà·ãç·äï ·ã≠·å´·äë:"
        : "üìä **Your Subscriptions**\n\nClick below to view your subscriptions:";

      const keyboard = [
        [
          { 
            text: lang === "am" ? "üìã ·àù·ãù·åà·â£·ãé·âΩ ·ã≠·àò·àç·ä®·â±" : "üìã View Subscriptions", 
            callback_data: "my_subs" 
          }
        ],
        [
          { 
            text: lang === "am" ? "üì± ·ä†·ã≤·àµ ·àù·ãù·åà·â£" : "üì± New Subscription", 
            callback_data: "services" 
          }
        ]
      ];

      await ctx.reply(quickMessage, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

      // Log activity
      await firestore.collection('userActivities').add({
        userId: ctx.from.id,
        activity: 'mysubs_accessed',
        timestamp: new Date(),
        metadata: { command: 'mysubs', language: lang }
      });

    } catch (error) {
      console.error("Error in mysubs command:", error);
      await ctx.reply(
        ctx.from.language_code === 'am'
          ? "·ã≠·âÖ·à≠·â≥·ç£ ·âΩ·åç·à≠ ·â∞·çà·å•·àØ·àç·ç¢ ·ä•·â£·ä≠·ãé ·ä•·äï·ã∞·åà·äì ·ã≠·àû·ä≠·à©·ç¢"
          : "Sorry, something went wrong. Please try again."
      );
    }
  });

  // Enhanced lang command
  bot.command("lang", async (ctx) => {
    try {
      const currentLang = ctx.from.language_code === 'am' ? 'am' : 'en';
      
      const langMessage = currentLang === "am"
        ? "üåê **·âã·äï·âã ·âÖ·äï·â•·àÆ·âΩ**\n\n·ã®·âã·äï·âã ·àù·à≠·å´·ãé·äï ·ã≠·àù·à®·å°:"
        : "üåê **Language Settings**\n\nSelect your language preference:";

      const keyboard = [
        [
          { text: "üá™üáπ ·ä†·àõ·à≠·äõ (Amharic)", callback_data: "set_lang_am" },
          { text: "üá∫üá∏ English", callback_data: "set_lang_en" }
        ],
        [
          { 
            text: currentLang === "am" ? "üîô ·ãà·ã∞ ·äã·àã" : "üîô Back", 
            callback_data: "back_to_start" 
          }
        ]
      ];

      await ctx.reply(langMessage, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } catch (error) {
      console.error("Error in lang command:", error);
      await ctx.reply("Error changing language settings.");
    }
  });

  // Language setting handlers
  bot.action("set_lang_am", async (ctx) => {
    try {
      await firestore.collection('users').doc(String(ctx.from.id)).update({
        language: 'am',
        updatedAt: new Date()
      });

      await ctx.editMessageText(
        "‚úÖ **·âã·äï·âã ·â∞·âÄ·ã≠·àØ·àç**\n\n·âã·äï·âã·ãé ·ãà·ã∞ ·ä†·àõ·à≠·äõ ·â∞·âÄ·ã≠·àØ·àç·ç¢ ·àÅ·àâ·àù ·àò·àç·ä•·ä≠·â∂·âΩ ·ä†·àÅ·äï ·â†·ä†·àõ·à≠·äõ ·ã≠·àã·ä´·àâ·ç¢",
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[
              { text: "üè† ·ãã·äì ·àù·äï·ã©", callback_data: "back_to_start" }
            ]]
          }
        }
      );

      await ctx.answerCbQuery("·âã·äï·âã ·ãà·ã∞ ·ä†·àõ·à≠·äõ ·â∞·âÄ·ã≠·àØ·àç");

    } catch (error) {
      console.error("Error setting Amharic language:", error);
      await ctx.answerCbQuery("Error changing language");
    }
  });

  bot.action("set_lang_en", async (ctx) => {
    try {
      await firestore.collection('users').doc(String(ctx.from.id)).update({
        language: 'en',
        updatedAt: new Date()
      });

      await ctx.editMessageText(
        "‚úÖ **Language Changed**\n\nYour language has been changed to English. All messages will now be sent in English.",
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[
              { text: "üè† Main Menu", callback_data: "back_to_start" }
            ]]
          }
        }
      );

      await ctx.answerCbQuery("Language changed to English");

    } catch (error) {
      console.error("Error setting English language:", error);
      await ctx.answerCbQuery("Error changing language");
    }
  });
}
