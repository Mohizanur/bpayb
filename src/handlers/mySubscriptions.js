import { getUserSubscriptions, getSubscription } from "../utils/database.js";
import { formatCurrency } from "../utils/payment.js";
import { db } from "../../firebase-config.js";

export default function mySubscriptionsHandler(bot) {
  // Handle my subscriptions menu
  bot.action("my_subs", async (ctx) => {
    try {
      const userId = String(ctx.from.id);
      const lang = ctx.userLang || 'en';
      
      // Get user's subscriptions
      const subscriptions = await getUserSubscriptions(userId);
      
      if (subscriptions.length === 0) {
        const message = lang === 'am'
          ? `üìä **·ã®·ä•·äî ·àù·ãù·åà·â£·ãé·âΩ**
          
·ä•·àµ·ä´·àÅ·äï ·àù·äï·àù ·àù·ãù·åà·â£·ãé·âΩ ·ã®·àâ·ãé·âµ·àù·ç¢ ·ä†·ã≤·àµ ·àù·ãù·åà·â£ ·àà·àò·åÄ·àò·à≠ ·ä•·â£·ä≠·ãé ·ä†·åà·àç·åç·àé·â∂·âΩ·äï ·ã≠·àù·à®·å°:`
          : `üìä **My Subscriptions**
          
You don't have any subscriptions yet. To start a new subscription, please select a service:`;
        
        const keyboard = [
          [{ text: lang === 'am' ? 'üì± ·ä†·åà·àç·åç·àé·â∂·âΩ ·ã≠·àù·à®·å°' : 'üì± Select Services', callback_data: 'services' }],
          [{ text: lang === 'am' ? 'üè† ·ãã·äì ·àù·äï·ã©' : 'üè† Main Menu', callback_data: 'back_to_menu' }]
        ];
        
        await ctx.editMessageText(message, {
          reply_markup: { inline_keyboard: keyboard },
          parse_mode: 'Markdown'
        });
        
        await ctx.answerCbQuery();
        return;
      }
      
      // Group subscriptions by status
      const pendingSubs = subscriptions.filter(sub => sub.status === 'pending');
      const activeSubs = subscriptions.filter(sub => sub.status === 'active');
      const cancelledSubs = subscriptions.filter(sub => sub.status === 'cancelled');
      const rejectedSubs = subscriptions.filter(sub => sub.status === 'rejected');
      
      let message = lang === 'am'
        ? `üìä **·ã®·ä•·äî ·àù·ãù·åà·â£·ãé·âΩ**
        
**·ã®·àö·å†·â†·âÅ:** ${pendingSubs.length}
**·äï·âÅ:** ${activeSubs.length}
**·ã®·â∞·à∞·à®·ãô:** ${cancelledSubs.length}
**·ã®·â∞·âÄ·â†·àâ:** ${rejectedSubs.length}

**·ã®·àù·ãù·åà·â£·ãé·âΩ·ãé·äï ·ã´·à≥·ã©:**`
        : `üìä **My Subscriptions**
        
**Pending:** ${pendingSubs.length}
**Active:** ${activeSubs.length}
**Cancelled:** ${cancelledSubs.length}
**Rejected:** ${rejectedSubs.length}

**View your subscriptions:**`;
      
      const keyboard = [];
      
      // Add subscription buttons
      subscriptions.slice(0, 5).forEach(sub => {
        const statusEmoji = {
          'pending': '‚è≥',
          'active': '‚úÖ',
          'cancelled': '‚ùå',
          'rejected': 'üö´'
        };
        
        const statusText = {
          'pending': lang === 'am' ? '·ã®·àö·å†·â†·âÖ' : 'Pending',
          'active': lang === 'am' ? '·äï·âÅ' : 'Active',
          'cancelled': lang === 'am' ? '·ã®·â∞·à∞·à®·ãò' : 'Cancelled',
          'rejected': lang === 'am' ? '·ã®·â∞·âÄ·â†·àà' : 'Rejected'
        };
        
        keyboard.push([
          {
            text: `${statusEmoji[sub.status]} ${sub.serviceName} - ${statusText[sub.status]}`,
            callback_data: `view_subscription_${sub.id}`
          }
        ]);
      });
      
      // Add action buttons
      keyboard.push([
        { text: lang === 'am' ? 'üì± ·ä†·ã≤·àµ ·àù·ãù·åà·â£' : 'üì± New Subscription', callback_data: 'services' },
        { text: lang === 'am' ? 'üîÑ ·ä•·äï·ã∞·åà·äì ·å´·äï' : 'üîÑ Refresh', callback_data: 'my_subs' }
      ]);
      
      keyboard.push([
        { text: lang === 'am' ? 'üè† ·ãã·äì ·àù·äï·ã©' : 'üè† Main Menu', callback_data: 'back_to_menu' }
      ]);
      
      try {
        await ctx.editMessageText(message, {
          reply_markup: { inline_keyboard: keyboard },
          parse_mode: 'Markdown'
        });
      } catch (editError) {
        // Handle "message is not modified" error gracefully
        if (editError.response && editError.response.error_code === 400 && 
            editError.response.description.includes('message is not modified')) {
          console.log('Message content unchanged, skipping edit');
        } else {
          throw editError; // Re-throw other errors
        }
      }

      await ctx.answerCbQuery();
      
    } catch (error) {
      console.error('Error in my subscriptions:', error);
      const lang = ctx.userLang || 'en';
      const errorMessage = lang === 'am'
        ? '‚ùå ·àù·ãù·åà·â£·ãé·âΩ·äï ·àõ·à≥·ã®·âµ ·àã·ã≠ ·àµ·àÖ·â∞·âµ ·â∞·ä®·àµ·â∑·àç·ç¢ ·ä•·â£·ä≠·ãé ·ä•·äï·ã∞·åà·äì ·ã≠·àû·ä≠·à©·ç¢'
        : '‚ùå Error loading subscriptions. Please try again.';
      
      await ctx.answerCbQuery(errorMessage);
    }
  });
  
  // Handle individual subscription view
  bot.action(/view_subscription_(.+)/, async (ctx) => {
    try {
      const subscriptionId = ctx.match[1];
      const lang = ctx.userLang || 'en';
      
      // Get subscription details
      const subscription = await getSubscription(subscriptionId);
      
      if (!subscription || subscription.userId !== String(ctx.from.id)) {
        await ctx.answerCbQuery(lang === 'am' ? '·àù·ãù·åà·â£ ·ä†·àç·â∞·åà·äò·àù' : 'Subscription not found');
        return;
      }
      
      const statusEmoji = {
        'pending': '‚è≥',
        'active': '‚úÖ',
        'cancelled': '‚ùå',
        'rejected': 'üö´'
      };
      
      const statusText = {
        'pending': lang === 'am' ? '·ã®·àö·å†·â†·âÖ' : 'Pending',
        'active': lang === 'am' ? '·äï·âÅ' : 'Active',
        'cancelled': lang === 'am' ? '·ã®·â∞·à∞·à®·ãò' : 'Cancelled',
        'rejected': lang === 'am' ? '·ã®·â∞·âÄ·â†·àà' : 'Rejected'
      };
      
      const paymentStatusText = {
        'pending': lang === 'am' ? '·ã®·àö·å†·â†·âÖ' : 'Pending',
        'completed': lang === 'am' ? '·â∞·àü·àç·â∑·àç' : 'Completed',
        'failed': lang === 'am' ? '·ãç·ãµ·âÖ ·àÜ·äê' : 'Failed'
      };
      
      const message = lang === 'am'
        ? `üìä **·ã®·àù·ãù·åà·â£ ·ãù·à≠·ãù·à≠**
        
**·ä†·åà·àç·åç·àé·âµ:** ${subscription.serviceName || 'N/A'}
**·ã®·ä•·âÖ·ãµ ·âÜ·ã≠·â≥:** ${subscription.durationName || subscription.duration || 'N/A'}
**·àò·å†·äï:** ${subscription.amount && !isNaN(subscription.amount) ? formatCurrency(subscription.amount) : 'N/A'}
**·àÅ·äî·â≥:** ${statusEmoji[subscription.status]} ${statusText[subscription.status]}
**·ã®·ä≠·çç·ã´ ·àÅ·äî·â≥:** ${paymentStatusText[subscription.paymentStatus] || '·â†·àò·å†·â£·â†·âÖ ·àã·ã≠'}
**·ã®·ä≠·çç·ã´ ·àõ·å£·âÄ·àª:** ${subscription.paymentReference || '·ä†·àç·â∞·åà·äò·àù'}
**·ã®·â∞·çà·å†·à®·â†·âµ ·âÄ·äï:** ${subscription.createdAt && typeof subscription.createdAt.toDate === 'function' 
          ? subscription.createdAt.toDate().toLocaleDateString() 
          : subscription.createdAt 
            ? new Date(subscription.createdAt).toLocaleDateString()
            : 'N/A'}

${subscription.rejectionReason ? `**·ã®·àò·âÄ·â†·àç ·àù·ä≠·äï·ã´·âµ:** ${subscription.rejectionReason}` : ''}`
        : `üìä **Subscription Details**
        
**Service:** ${subscription.serviceName || 'N/A'}
**Duration:** ${subscription.durationName || subscription.duration || 'N/A'}
**Amount:** ${subscription.amount && !isNaN(subscription.amount) ? formatCurrency(subscription.amount) : 'N/A'}
**Status:** ${statusEmoji[subscription.status]} ${statusText[subscription.status]}
**Payment Status:** ${paymentStatusText[subscription.paymentStatus] || 'Pending'}
**Payment Reference:** ${subscription.paymentReference || 'Not Available'}
**Created:** ${subscription.createdAt && typeof subscription.createdAt.toDate === 'function' 
          ? subscription.createdAt.toDate().toLocaleDateString() 
          : subscription.createdAt 
            ? new Date(subscription.createdAt).toLocaleDateString()
            : 'N/A'}

${subscription.rejectionReason ? `**Rejection Reason:** ${subscription.rejectionReason}` : ''}`;
      
      const keyboard = [];
      
      // Add action buttons based on status
      if (subscription.status === 'pending') {
        if (!subscription.screenshotUploaded) {
          keyboard.push([
            { text: lang === 'am' ? 'üì∏ ·àµ·ä≠·à™·äï·àæ·âµ ·ã´·àµ·åà·â°' : 'üì∏ Upload Screenshot', callback_data: `upload_screenshot_${subscriptionId}` }
          ]);
        }
        keyboard.push([
          { text: lang === 'am' ? '‚ùå ·àù·ãù·åà·â£ ·ã´·àµ·â∞·à≥·àµ·à©' : '‚ùå Cancel Subscription', callback_data: `cancel_subscription_${subscriptionId}` }
        ]);
      } else if (subscription.status === 'active') {
        keyboard.push([
          { text: lang === 'am' ? '‚ùå ·àù·ãù·åà·â£ ·ã´·àµ·â∞·à≥·àµ·à©' : '‚ùå Cancel Subscription', callback_data: `cancel_subscription_${subscriptionId}` }
        ]);
      }
      
      keyboard.push([
        { text: lang === 'am' ? '‚¨ÖÔ∏è ·ãà·ã∞ ·äã·àã' : '‚¨ÖÔ∏è Back', callback_data: 'my_subs' }
      ]);
      
      await ctx.editMessageText(message, {
        reply_markup: { inline_keyboard: keyboard },
        parse_mode: 'Markdown'
      });
      
      await ctx.answerCbQuery();
      
    } catch (error) {
      console.error('Error viewing subscription:', error);
      const lang = ctx.userLang || 'en';
      const errorMessage = lang === 'am'
        ? '‚ùå ·àù·ãù·åà·â£ ·àõ·à≥·ã®·âµ ·àã·ã≠ ·àµ·àÖ·â∞·âµ ·â∞·ä®·àµ·â∑·àç·ç¢ ·ä•·â£·ä≠·ãé ·ä•·äï·ã∞·åà·äì ·ã≠·àû·ä≠·à©·ç¢'
        : '‚ùå Error viewing subscription. Please try again.';
      
      await ctx.answerCbQuery(errorMessage);
    }
  });
  
  // Handle subscription cancellation
  bot.action(/cancel_subscription_(.+)/, async (ctx) => {
    try {
      const subscriptionId = ctx.match[1];
      const lang = ctx.userLang || 'en';
      
      // Get subscription details
      const subscription = await getSubscription(subscriptionId);
      
      if (!subscription || subscription.userId !== String(ctx.from.id)) {
        await ctx.answerCbQuery(lang === 'am' ? '·àù·ãù·åà·â£ ·ä†·àç·â∞·åà·äò·àù' : 'Subscription not found');
        return;
      }
      
      if (subscription.status === 'cancelled') {
        await ctx.answerCbQuery(lang === 'am' ? '·àù·ãù·åà·â£·ãç ·ä†·àµ·âÄ·ãµ·àû ·â∞·à∞·à≠·ãü·àç' : 'Subscription already cancelled');
        return;
      }
      
      const message = lang === 'am'
        ? `‚ùå **·àù·ãù·åà·â£ ·àõ·àµ·â∞·à≥·à∞·à≠**
        
**·ä†·åà·àç·åç·àé·âµ:** ${subscription.serviceName}
**·ã®·ä•·âÖ·ãµ ·âÜ·ã≠·â≥:** ${subscription.durationName}
**·àò·å†·äï:** ${formatCurrency(subscription.amount)}

·ä•·à≠·àµ·ãé ·ã≠·àÖ·äï ·àù·ãù·åà·â£ ·àõ·àµ·â∞·à≥·à∞·à≠ ·ä•·äï·ã∞·àö·çà·àç·åâ ·ä•·à≠·åç·å†·äõ ·äê·ãé·âµ?`
        : `‚ùå **Cancel Subscription**
        
**Service:** ${subscription.serviceName}
**Duration:** ${subscription.durationName}
**Amount:** ${formatCurrency(subscription.amount)}

Are you sure you want to cancel this subscription?`;
      
      const keyboard = [
        [
          { text: lang === 'am' ? '‚úÖ ·ä†·ãé·ç£ ·ã´·àµ·â∞·à≥·àµ·à©' : '‚úÖ Yes, Cancel', callback_data: `confirm_cancel_${subscriptionId}` },
          { text: lang === 'am' ? '‚ùå ·ä†·ã≠' : '‚ùå No', callback_data: `view_subscription_${subscriptionId}` }
        ]
      ];
      
      await ctx.editMessageText(message, {
        reply_markup: { inline_keyboard: keyboard },
        parse_mode: 'Markdown'
      });
      
      await ctx.answerCbQuery();
      
    } catch (error) {
      console.error('Error cancelling subscription:', error);
      const lang = ctx.userLang || 'en';
      const errorMessage = lang === 'am'
        ? '‚ùå ·àù·ãù·åà·â£ ·àõ·àµ·â∞·à≥·à∞·à≠ ·àã·ã≠ ·àµ·àÖ·â∞·âµ ·â∞·ä®·àµ·â∑·àç·ç¢ ·ä•·â£·ä≠·ãé ·ä•·äï·ã∞·åà·äì ·ã≠·àû·ä≠·à©·ç¢'
        : '‚ùå Error cancelling subscription. Please try again.';
      
      await ctx.answerCbQuery(errorMessage);
    }
  });
  
  // Handle cancellation confirmation
  bot.action(/confirm_cancel_(.+)/, async (ctx) => {
    try {
      const subscriptionId = ctx.match[1];
      const lang = ctx.userLang || 'en';
      
      // Update subscription status to cancelled in database
      await db.collection('subscriptions').doc(subscriptionId).update({
        status: 'cancelled',
        cancelledAt: new Date().toISOString(),
        cancelledBy: String(ctx.from.id),
        updatedAt: new Date().toISOString()
      });
      
      // Cancellation successful
      const message = lang === 'am'
        ? `‚úÖ **·àù·ãù·åà·â£ ·â∞·à∞·à≠·ãü·àç**
        
·ã®·ä•·à≠·àµ·ãé ·àù·ãù·åà·â£ ·â†·â∞·à≥·ä´·â∞ ·àÅ·äî·â≥ ·â∞·à∞·à≠·ãü·àç·ç¢ ·àà·â∞·å®·àõ·à™ ·àò·à®·åÉ ·ã®·ãµ·åã·çç ·â°·ãµ·äë·äï ·ã´·åç·äô·ç¢`
        : `‚úÖ **Subscription Cancelled**
        
Your subscription has been cancelled successfully. Contact support for more information.`;
      
      const keyboard = [
        [{ text: lang === 'am' ? 'üìä ·ã®·ä•·äî ·àù·ãù·åà·â£·ãé·âΩ' : 'üìä My Subscriptions', callback_data: 'my_subs' }],
        [{ text: lang === 'am' ? 'üè† ·ãã·äì ·àù·äï·ã©' : 'üè† Main Menu', callback_data: 'back_to_menu' }]
      ];
      
      await ctx.editMessageText(message, {
        reply_markup: { inline_keyboard: keyboard },
        parse_mode: 'Markdown'
      });
      
      await ctx.answerCbQuery(lang === 'am' ? '·àù·ãù·åà·â£ ·â∞·à∞·à≠·ãü·àç' : 'Subscription cancelled');
      
    } catch (error) {
      console.error('Error confirming cancellation:', error);
      const lang = ctx.userLang || 'en';
      const errorMessage = lang === 'am'
        ? '‚ùå ·àù·ãù·åà·â£ ·àõ·àµ·â∞·à≥·à∞·à≠ ·àã·ã≠ ·àµ·àÖ·â∞·âµ ·â∞·ä®·àµ·â∑·àç·ç¢ ·ä•·â£·ä≠·ãé ·ä•·äï·ã∞·åà·äì ·ã≠·àû·ä≠·à©·ç¢'
        : '‚ùå Error cancelling subscription. Please try again.';
      
      await ctx.answerCbQuery(errorMessage);
    }
  });
}
